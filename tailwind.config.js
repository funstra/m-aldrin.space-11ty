const plugin = require("tailwindcss/plugin");

function withOpacityValue(variable) {
  return ({ opacityValue }) => {
    if (opacityValue === undefined) {
      return `hsl(var(${variable}))`;
    }
    return `hsl(var(${variable}) / ${opacityValue})`;
  };
}

/** @type {import("tailwindcss/tailwind-config").TailwindConfig} */
module.exports = {
  content: ["./src/index.njk", "./src/**/*.njk"],
  presets: [],
  darkMode: "class", // or 'class'
  theme: {
    extend: {
      gridTemplateColumns: {
        "auto-fit": "repeat(auto-fit, minmax(0, 1fr))",
        "auto-fill": "repeat(auto-fill, minmax(0, 1fr))",
      },
      gridTemplateRows: {
        "auto-fit": "repeat(auto-fit, minmax(0, 1fr))",
        "auto-fill": "repeat(auto-fill, minmax(0, 1fr))",
      },
    },
    screens: {
      sm: "384px",
      md: "768px",
      lg: "1152px",
      xl: "1536px",
    },
    colors: {
      primary: withOpacityValue("--col-primary"),
      secondary: withOpacityValue("--col-secondary"),
      ternary: withOpacityValue("--col-ternary"),
      black: withOpacityValue("--col-blk"),
      white: withOpacityValue("--col-wht"),
    },
    columns: {},
    spacing: {
      "3xs": "var(--space-3xs)",
      "2xs": "var(--space-2xs)",
      xs: "var(--space-xs)",
      s: "var(--space-s)",
      m: "var(--space-m)",
      l: "var(--space-l)",
      xl: "var(--space-xl)",
      "2xl": "var(--space-2xl)",
      "3xl": "var(--space-3xl)",
    },
    animation: {},
    aspectRatio: {},
    backdropBlur: {},
    backdropBrightness: {},
    backdropContrast: {},
    backdropGrayscale: {},
    backdropHueRotate: {},
    backdropInvert: {},
    backdropOpacity: {},
    backdropSaturate: {},
    backdropSepia: {},
    backgroundColor: ({ theme }) => theme("colors"),
    backgroundImage: {},
    backgroundOpacity: ({ theme }) => theme("opacity"),
    backgroundPosition: {},
    backgroundSize: {},
    blur: {},
    brightness: {},
    borderColor: ({ theme }) => ({
      ...theme("colors"),
      DEFAULT: theme("colors.gray.200", "currentColor"),
    }),
    borderOpacity: ({ theme }) => theme("opacity"),
    borderRadius: {
      sm: "0.25rem",
      md: "0.25rem",
      lg: "0.25rem",
    },
    borderWidth: {},
    boxShadow: {
      sm: "0 0 8px 0 rgb(0 0 0 / 0.1)",
      md: "0 0 16px 0 rgb(0 0 0 / 0.1)",
      lg: "0 0 24px 0 rgb(0 0 0 / 0.1)",
    },
    boxShadowColor: ({ theme }) => theme("colors"),
    caretColor: ({ theme }) => theme("colors"),
    accentColor: ({ theme }) => ({
      ...theme("colors"),
      auto: "auto",
    }),
    contrast: {},
    container: {},
    content: {
      none: "none",
    },
    cursor: {
      auto: "auto",
      default: "default",
      pointer: "pointer",
      wait: "wait",
      text: "text",
      move: "move",
      help: "help",
      "not-allowed": "not-allowed",
      none: "none",
      "context-menu": "context-menu",
      progress: "progress",
      cell: "cell",
      crosshair: "crosshair",
      "vertical-text": "vertical-text",
      alias: "alias",
      copy: "copy",
      "no-drop": "no-drop",
      grab: "grab",
      grabbing: "grabbing",
      "all-scroll": "all-scroll",
      "col-resize": "col-resize",
      "row-resize": "row-resize",
      "n-resize": "n-resize",
      "e-resize": "e-resize",
      "s-resize": "s-resize",
      "w-resize": "w-resize",
      "ne-resize": "ne-resize",
      "nw-resize": "nw-resize",
      "se-resize": "se-resize",
      "sw-resize": "sw-resize",
      "ew-resize": "ew-resize",
      "ns-resize": "ns-resize",
      "nesw-resize": "nesw-resize",
      "nwse-resize": "nwse-resize",
      "zoom-in": "zoom-in",
      "zoom-out": "zoom-out",
    },
    divideColor: ({ theme }) => theme("borderColor"),
    divideOpacity: ({ theme }) => theme("borderOpacity"),
    divideWidth: ({ theme }) => theme("borderWidth"),
    dropShadow: {},
    fill: ({ theme }) => theme("colors"),
    grayscale: {
      0: "0",
      DEFAULT: "100%",
    },
    hueRotate: {},
    invert: {
      0: "0",
      DEFAULT: "100%",
    },
    flex: {
      1: "1 1 0%",
      auto: "1 1 auto",
      initial: "0 1 auto",
      none: "none",
    },
    flexBasis: {},
    flexGrow: {
      0: "0",
      DEFAULT: "1",
    },
    flexShrink: {
      0: "0",
      DEFAULT: "1",
    },
    fontFamily: {
      sans: [],
      serif: [],
      mono: [],
    },
    fontSize: {
      "-1": "var(--step--1)",
      0: "var(--step-0)",
      1: "var(--step-1)",
      2: "var(--step-2)",
      3: "var(--step-3)",
      4: "var(--step-4)",
      5: "var(--step-5)",
      6: "var(--step-6)",
      7: "var(--step-7)",
    },
    fontWeight: {
      thin: "100",
      extralight: "200",
      light: "300",
      normal: "400",
      medium: "500",
      semibold: "600",
      bold: "700",
      extrabold: "800",
      black: "900",
    },
    gap: ({ theme }) => theme("spacing"),
    gradientColorStops: ({ theme }) => theme("colors"),
    gridAutoColumns: {},
    gridAutoRows: {},
    gridColumn: {},
    gridColumnEnd: {},
    gridColumnStart: {},
    gridRow: {},
    gridRowStart: {},
    gridRowEnd: {},
    gridTemplateColumns: {
      1: "1",
      2: "repeat(2, minmax(0, 1fr))",
      3: "repeat(3, minmax(0, 1fr))",
      4: "repeat(4, minmax(0, 1fr))",
      5: "repeat(5, minmax(0, 1fr))",
      6: "repeat(6, minmax(0, 1fr))",
      7: "repeat(7, minmax(0, 1fr))",
      8: "repeat(8, minmax(0, 1fr))",
    },
    gridTemplateRows: {},
    height: ({ theme }) => ({
      auto: "auto",
      ...theme("spacing"),
      "1/2": "50%",
      full: "100%",
      screen: "100vh",
      min: "min-content",
      max: "max-content",
      fit: "fit-content",
    }),
    inset: ({ theme }) => ({
      auto: "auto",
      ...theme("spacing"),
      "1/2": "50%",
      "1/3": "33.333333%",
      "2/3": "66.666667%",
      "1/4": "25%",
      "2/4": "50%",
      "3/4": "75%",
      full: "100%",
    }),
    keyframes: {},
    letterSpacing: {
      tighter: "-0.2ch",
      tight: "-0.025ch",
      normal: "0ch",
      wide: "0.025ch",
      wider: "0.05ch",
      widest: "0.1ch",
    },
    lineHeight: {},
    listStyleType: {
      none: "none",
      disc: "disc",
      decimal: "decimal",
    },
    margin: ({ theme }) => ({
      auto: "auto",
      ...theme("spacing"),
    }),
    maxHeight: ({ theme }) => ({
      ...theme("spacing"),
      full: "100%",
      screen: "100vh",
      min: "min-content",
      max: "max-content",
      fit: "fit-content",
    }),
    maxWidth: ({ theme, breakpoints }) => ({
      none: "none",
      full: "100%",
      0: "0rem",
      prose: "65ch",
      ...breakpoints(theme("screens")),
    }),
    minHeight: {
      0: "0px",
      full: "100%",
      screen: "100vh",
      min: "min-content",
      max: "max-content",
      fit: "fit-content",
    },
    minWidth: {
      0: "0px",
      full: "100%",
      min: "min-content",
      max: "max-content",
      fit: "fit-content",
    },
    objectPosition: {
      bottom: "bottom",
      center: "center",
      left: "left",
      "left-bottom": "left bottom",
      "left-top": "left top",
      right: "right",
      "right-bottom": "right bottom",
      "right-top": "right top",
      top: "top",
    },
    opacity: {
      0: "0",
      5: "0.05",
      10: "0.1",
      30: "0.3",
      50: "0.5",
      80: "0.8",
      95: "0.95",
      100: "1",
    },
    order: {},
    padding: ({ theme }) => ({
      0: "0",
      ...theme("spacing"),
    }),
    placeholderColor: ({ theme }) => theme("colors"),
    placeholderOpacity: ({ theme }) => theme("opacity"),
    outlineColor: ({ theme }) => theme("colors"),
    outlineOffset: {},
    outlineWidth: {},
    ringColor: ({ theme }) => ({
      DEFAULT: theme("colors.blue.500", "#3b82f6"),
      ...theme("colors"),
    }),
    ringOffsetColor: ({ theme }) => theme("colors"),
    ringOffsetWidth: {},
    ringOpacity: ({ theme }) => ({
      DEFAULT: "0.5",
      ...theme("opacity"),
    }),
    ringWidth: {},
    rotate: {},
    saturate: {},
    scale: {},
    scrollMargin: ({ theme }) => ({
      ...theme("spacing"),
    }),
    scrollPadding: ({ theme }) => theme("spacing"),
    sepia: {},
    skew: {},
    space: ({ theme }) => ({
      ...theme("spacing"),
    }),
    stroke: ({ theme }) => theme("colors"),
    strokeWidth: {},
    textColor: ({ theme }) => theme("colors"),
    textDecorationColor: ({ theme }) => theme("colors"),
    textDecorationThickness: {},
    textUnderlineOffset: {},
    textIndent: ({ theme }) => ({
      ...theme("spacing"),
    }),
    textOpacity: ({ theme }) => theme("opacity"),
    transformOrigin: {},
    transitionDelay: ({ theme }) => theme("transitionDuration"),
    transitionDuration: {
      50: "50ms",
      75: "75ms",
      125: "125ms",
      175: "175ms",
      225: "225ms",
      300: "300ms",
      500: "500ms",
    },
    transitionProperty: {
      color: "color",
      transform: "transform",
      weight: "font-variation-settings",
    },
    transitionTimingFunction: {
      mud: "var(--transition-timing-mud)",
    },
    translate: {},
    width: {},
    willChange: {},
    zIndex: {
      1: "1",
      2: "2",
      3: "3",
      4: "4",
      5: "5",
      10: "10",
      20: "20",
      30: "30",
      40: "40",
      50: "50",
    },
  },
  variantOrder: [
    "first",
    "last",
    "odd",
    "even",
    "visited",
    "checked",
    "empty",
    "read-only",
    "group-hover",
    "group-focus",
    "focus-within",
    "hover",
    "focus",
    "focus-visible",
    "active",
    "disabled",
  ],
  plugins: [
    plugin(function ({ matchUtilities, theme }) {
      matchUtilities(
        {
          wght: value => ({
            "font-variation-settings": `'wght' ${value}`,
          }),
        },
        { values: theme("fontWeight") }
      );
    }),
    plugin(
      function ({ matchUtilities, theme }) {
        matchUtilities(
          {
            grodRow: value => ({
              "grid-row": `${value}`,
            }),
          },
          { values: theme("gridRow") }
        );
      },
      {
        theme: {
          gridRow: {
            1: "1",
          },
        },
      }
    ),
    plugin(
      function ({ matchUtilities, theme }) {
        matchUtilities(
          {
            autoCol: value => ({
              "grid-template-columns": `repeat(auto-fit, minmax(${value}, 1fr))`,
            }),
          },
          { values: theme("spacing") }
        );
      },
      {
        theme: {
          gridRow: {
            1: "1",
          },
        },
      }
    ),
  ],
};
